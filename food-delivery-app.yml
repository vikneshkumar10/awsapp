AWSTemplateFormatVersion: '2010-09-09'
Description: 'Food Delivery App Infrastructure Stack'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name

Resources:
  # API Gateway for Frontend Communication
  FoodDeliveryApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${Environment}-food-delivery-api
      Description: API Gateway for Food Delivery App

  # Cognito User Pool for Authentication
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${Environment}-food-delivery-users
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: true
          Required: true

  # DynamoDB Tables
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH

  RestaurantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-restaurants
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: restaurantId
          AttributeType: S
      KeySchema:
        - AttributeName: restaurantId
          KeyType: HASH

  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-orders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserOrders
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # S3 Bucket for Static Assets
  StaticAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Environment}-food-delivery-assets-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ElasticSearch for Search Functionality
  RestaurantSearch:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: !Sub ${Environment}-restaurant-search
      ElasticsearchVersion: '7.10'
      ElasticsearchClusterConfig:
        InstanceType: t3.small.elasticsearch
        InstanceCount: 1
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2

  # SNS Topic for Notifications
  NotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-notifications

  # Lambda Functions
  UserManagementFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-user-management
      Runtime: nodejs14.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            // User management logic will go here
            return {
              statusCode: 200,
              body: JSON.stringify({ message: "User management endpoint" })
            };
          }
      Role: !GetAtt LambdaExecutionRole.Arn

  OrderProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Environment}-order-processing
      Runtime: nodejs14.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            // Order processing logic will go here
            return {
              statusCode: 200,
              body: JSON.stringify({ message: "Order processing endpoint" })
            };
          }
      Role: !GetAtt LambdaExecutionRole.Arn

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${FoodDeliveryApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  StaticAssetsBucketName:
    Description: S3 Bucket for static assets
    Value: !Ref StaticAssetsBucket